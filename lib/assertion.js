// Generated by CoffeeScript 1.7.1
(function() {
  var BindingAssertion, ExchangeAssertion, QueueAssertion, whenlib;

  whenlib = require("when");

  module.exports.ExchangeAssertion = ExchangeAssertion = (function() {
    function ExchangeAssertion(name, type, options) {
      this.name = name;
      this.type = type;
      this.options = options;
    }

    ExchangeAssertion.prototype.execute = function(channelOrPromise) {
      return whenlib(channelOrPromise, (function(_this) {
        return function(channel) {
          return channel.assertExchange(_this.name, _this.type, _this.options);
        };
      })(this));
    };

    return ExchangeAssertion;

  })();

  module.exports.QueueAssertion = QueueAssertion = (function() {
    function QueueAssertion(name, options) {
      this.name = name;
      this.options = options;
    }

    QueueAssertion.prototype.execute = function(channelOrPromise) {
      return whenlib(channelOrPromise, (function(_this) {
        return function(channel) {
          return channel.assertQueue(_this.name, _this.options);
        };
      })(this));
    };

    return QueueAssertion;

  })();

  module.exports.BindingAssertion = BindingAssertion = (function() {
    function BindingAssertion(queue, exchange, routingKey) {
      this.queue = queue;
      this.exchange = exchange;
      this.routingKey = routingKey;
    }

    BindingAssertion.prototype.execute = function(channelOrPromise) {
      return whenlib(channelOrPromise, (function(_this) {
        return function(channel) {
          return channel.bindQueue(_this.queue, _this.exchange, _this.routingKey);
        };
      })(this));
    };

    return BindingAssertion;

  })();

}).call(this);
